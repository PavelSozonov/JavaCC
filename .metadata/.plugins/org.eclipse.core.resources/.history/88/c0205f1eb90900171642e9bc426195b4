import java.io.File;
import java.util.Scanner;
import java.util.function.Consumer;
import java.util.function.Predicate;

public class CLI {

	private static String samples = "src/samples";
	private static String testReport = "src/samples/report.csv";
	
	public static void main(String[] args) {

		CLI cli = new CLI();
		cli.run();
	}
	
	private void run() {

		Scanner scanner = new Scanner(System.in);
		while (true) {
			System.out.print("Command (h - help): ");
			String input = scanner.nextLine();
			switch (input) {
			case "h":
				showHelp();
				break;
			case "f":
				showFiles();
				break;
			case "t":
				testFile();
				break;
			case "a":
				testAllFiles();
				break;
			case "e": // exit
				scanner.close();
				return;
			default:
				System.out.println("Unknown command");
			}
		}
	}
	
	/*
	 * Print names of all files from sample folder
	 */
	private void showFiles() {
		System.out.println("Sample files:");
		fileProcessor((File f) -> { if (f.isFile()) System.out.println(f.getName()); });
	}

	/*
	 * Print to console help information
	 */
	private void showHelp() {
		System.out.println("Help:\n"
				+ " h - show help\n"
				+ " f - show sample files\n"
				+ " t - test a file\n"
				+ " a - test all files\n"
				+ " e - exit");
	}
	
	private void testFile() {
		System.out.println("All files (from sample folder):");
		showFiles();
		System.out.println("Enter the name of the file which will test: ");
		Scanner scanner = new Scanner(System.in);
		String fileName = scanner.nextLine();
		scanner.close();
		//fileProcessor((File f) -> {});
		
		if (checkFileName(fileName)) {
			testFile(fileName);
		} else {
			System.out.println("File name is incorrect!");
		}
	}
	
	private boolean checkFileName(String fileName) {
		File folder = new File(samples);
		File[] listOfFiles = folder.listFiles();
		
		for (File file : listOfFiles) {
			if (file.isFile() && file.getName().equals(fileName)) {
				return true;
			}
		}
		return false;
	}
	
	private void testFile(String fileName) {
		
	}

	private void testAllFiles() {
		
	}
	
	private void fileProcessor(Consumer<File> consumer) {
		File folder = new File(samples);
		File[] listOfFiles = folder.listFiles();
		
		for (File file : listOfFiles) {
			consumer.accept(file);
		}
	}
	
	
	
	
}
