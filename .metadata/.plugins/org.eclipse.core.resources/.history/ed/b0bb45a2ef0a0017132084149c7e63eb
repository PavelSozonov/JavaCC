import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Scanner;
import java.util.function.Consumer;

import metrics.MetricsCounter;

public class CLI {

	private static String samples = "src/tests";
	private static String testReport = "src/samples/report.csv";
	
	public void run() {

		Scanner scanner = new Scanner(System.in);
		while (true) {
			System.out.print("Command (h - help): ");
			String input = scanner.nextLine();
			switch (input) {
			case "h":
				showHelp();
				break;
			case "f":
				showFiles();
				break;
			case "t":
				testFile(scanner);
				break;
			case "a":
				testAllFiles();
				break;
			case "e": // exit
				scanner.close();
				return;
			default:
				System.out.println("Unknown command");
			}
		}
	}
	
	/*
	 * Print names of all files from sample folder
	 */
	private void showFiles() {
		System.out.println("Sample files:");
		fileProcessor((File f) -> { if (f.isFile()) System.out.println(f.getName()); });
	}

	/*
	 * Print to console help information
	 */
	private void showHelp() {
		System.out.println("Help:\n"
				+ " h - show help\n"
				+ " f - show sample files\n"
				+ " t - test a file\n"
				+ " a - test all files\n"
				+ " e - exit");
	}
	
	private void testFile(Scanner scanner) {
		System.out.println("All files (from sample folder):");
		showFiles();
		System.out.print("Enter the name of the file which will test: ");
		//Scanner scanner = new Scanner(System.in);
		String fileName = scanner.nextLine();
		//scanner.close();
		
		if (checkFileName(fileName)) {
			testFileWriteReport(fileName);
		} else {
			System.out.println("File name is incorrect!");
		}
	}
	
	private boolean checkFileName(String fileName) {

		File folder = new File(samples);
		File[] listOfFiles = folder.listFiles();
		
		for (File file : listOfFiles) {
			if (file.isFile() && file.getName().equals(fileName)) {
				return true;
			}
		}
		return false;
	}
	
	/*
	 * Precondition: fileName is always correct
	 */
	private void testFileWriteReport(String fileName) throws FileNotFoundException {
		
		FileInputStream fileContent = new java.io.FileInputStream(fileName);
		RbParser parser = new RbParser(fileContent); 
		
		MetricsCounter metricsCounter = parser.countMetrics();
		writeReport(metricsCounter);
	}

	private void testAllFiles() {
		
	}
	
	private void fileProcessor(Consumer<File> consumer) {
		File folder = new File(samples);
		File[] listOfFiles = folder.listFiles();
		
		for (File file : listOfFiles) {
			consumer.accept(file);
		}
	}
	
	/*
	 * Write report in csv file, append line to file
	 */
	private void writeReport(MetricsCounter metricsCounter) {
		writeReportHeader();
		appendMetrics(metricsCounter);
	}
	
	private void writeReportHeader() {
		try {
			FileWriter fw = new FileWriter(testReport, false); // Rewrite file
	        for (int colNum = 1; colNum <= 23; colNum++) {
	        	fw.write("Col" + colNum + "\t");
	        }
	        fw.append('\n'); 		
	        fw.flush();
	        fw.close();	
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public static void appendMetrics(MetricsCounter metricsCounter) {

		try {
			FileWriter fw = new FileWriter(testReport, true); // Append file
			for (String metric : metricsCounter.getMetrics()) {
				fw.append(metric + "\t");
			}
            fw.append('\n');  
            fw.flush();
            fw.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
}
