/* Generated By:JavaCC: Do not edit this line. RbParser.java */
import java.io.StringReader;
import java.io.InputStream;
import java.io.Reader;
import metrics.MetricsCounter;

public class RbParser implements RbParserConstants {

        private int classCounter = 0;

        // Metrics	
        private static int amountOfStatements = 0;

        public MetricsCounter countMetrics() {
                MetricsCounter metricsCounter = new MetricsCounter();
                this.clazz();
                metricsCounter.getMetrics()[0] = classCounter();
                return metricsCounter;
        }

        /*  
	 * A String based constructor for ease of use
	 */
        public RbParser(String s) {
                this((Reader)(new StringReader(s)));
        }

        public void startCLI(RbParser parser) {
         CLI cli = new CLI(parser);
         cli.run();
    }

        public static void main(String args[]) {
                RbParser parser = new RbParser();
        parser.startCLI(this);
    }

  static final public void program() throws ParseException {
        System.out.println("program()");
    identifier();
    expr();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case T:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      label_2:
      while (true) {
        jj_consume_token(T);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case T:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case underscore:
      case letter:
        program();
        break;
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
  }

  static final public void string() throws ParseException {
        System.out.println("string()");
    jj_consume_token(quote);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case underscore:
      case lparen:
      case rparen:
      case plus:
      case minus:
      case equal:
      case dot:
      case symbol:
      case letter:
      case digit:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case letter:
        letter();
        break;
      case digit:
        digit();
        break;
      case underscore:
      case lparen:
      case rparen:
      case plus:
      case minus:
      case equal:
      case dot:
      case symbol:
        symbol();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(quote);
  }

  static final public void num() throws ParseException {
        System.out.println("num()");
    label_4:
    while (true) {
      jj_consume_token(digit);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case digit:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case dot:
      jj_consume_token(dot);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case digit:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_5;
        }
        jj_consume_token(digit);
      }
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
  }

  static final public void letter() throws ParseException {
        System.out.println("letter()");
    jj_consume_token(letter);
  }

  static final public void op() throws ParseException {
        System.out.println("op()");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case op_asgn:
      jj_consume_token(op_asgn);
      break;
    case plus:
      jj_consume_token(plus);
      break;
    case minus:
      jj_consume_token(minus);
      break;
    case equal:
      jj_consume_token(equal);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void digit() throws ParseException {
        System.out.println("digit()");
    jj_consume_token(digit);
  }

  static final public void symbol() throws ParseException {
        System.out.println("symbol()");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case symbol:
      jj_consume_token(symbol);
      break;
    case lparen:
      jj_consume_token(lparen);
      break;
    case rparen:
      jj_consume_token(rparen);
      break;
    case underscore:
      jj_consume_token(underscore);
      break;
    case dot:
      jj_consume_token(dot);
      break;
    case plus:
      jj_consume_token(plus);
      break;
    case minus:
      jj_consume_token(minus);
      break;
    case equal:
      jj_consume_token(equal);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void identifier() throws ParseException {
        System.out.println("identifier()");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case letter:
      letter();
      break;
    case underscore:
      jj_consume_token(underscore);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case underscore:
      case letter:
      case digit:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case letter:
        letter();
        break;
      case underscore:
        jj_consume_token(underscore);
        break;
      case digit:
        digit();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void expr() throws ParseException {
        System.out.println("expr()");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case underscore:
    case letter:
      identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case plus:
      case minus:
      case equal:
      case op_asgn:
        expr2();
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      break;
    case quote:
      string();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case plus:
      case minus:
      case equal:
      case op_asgn:
        expr2();
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      break;
    case digit:
      num();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case plus:
      case minus:
      case equal:
      case op_asgn:
        expr2();
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      break;
    case lparen:
      jj_consume_token(lparen);
      expr();
      jj_consume_token(rparen);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case plus:
      case minus:
      case equal:
      case op_asgn:
        expr2();
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void expr2() throws ParseException {
        System.out.println("");
    op();
    expr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case plus:
    case minus:
    case equal:
    case op_asgn:
      expr2();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
  }

  static final public void clazz() throws ParseException {
        classCounter++;
    jj_consume_token(clazz);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public RbParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8,0x8,0x4011,0xefd0,0xefd0,0x8000,0x8000,0x800,0x10700,0x2fd0,0x4010,0xc010,0xc010,0x10700,0x10700,0x10700,0x10700,0xc070,0x10700,};
   }

  /** Constructor with InputStream. */
  public RbParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RbParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RbParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public RbParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RbParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public RbParser(RbParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RbParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[17];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 17; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
