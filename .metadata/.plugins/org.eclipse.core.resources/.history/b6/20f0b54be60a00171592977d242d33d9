PARSER_BEGIN(RbParser)

import java.io.StringReader;
import java.io.InputStream;
import java.io.Reader;

public class RbParser {

	private int classCounter = 0;
	
	private static InputStream input;

	private static int amountOfStatements = 0;

	private static boolean inputFromFile = true;

	private static String file = "src/tests/code3.rb"; 
	
	private class Metrics {
		private final static int AMOUNT_OF_METRICS = 23;
		public long metrics[] = new long[AMOUNT_OF_METRICS];
	}

	/*  
	 * A String based constructor for ease of use
	 */
	public RbParser(String s) {
		this((Reader)(new StringReader(s))); 
	}
   
	public static void main(String args[]) {
                try {
                        if (inputFromFile) {
                                System.out.println("Reading from file " + file + " ...");
                                try {
                                        input = new java.io.FileInputStream(file);
                                } catch (java.io.FileNotFoundException e) {
                                        System.out.println("File " + file + " not found.");
                                        return;
                                }
                        } else {
                                System.out.println("Reading from standard input ...");
                                input = System.in;
                        }
                        
                        RbParser parser = new RbParser(input);
                        parser.program();
                        System.out.println("Done! Amount of statements = " + amountOfStatements);
                }
                catch(Exception e) {
                        e.printStackTrace();
        }
    }
}

PARSER_END(RbParser)

SKIP : {" " | "\t" }

TOKEN : { <T : "\n" | ";"> }
TOKEN : { <underscore : "_"> }
TOKEN : { <quote : "\""> }
TOKEN : { <lparen : "("> }
TOKEN : { <rparen : ")"> }
TOKEN : { <plus : "+"> }
TOKEN : { <minus : "-"> }
TOKEN : { <equal : "="> }
TOKEN : { <dot : "."> }
TOKEN : { <class : "class"> }

TOKEN : { <symbol : "|" | " " | "!" | "#" | "$" | "%" | "&" | "*" | ","
					| "-" | "/" | ":" | ";" | "<" | ">" | "?" | "@" | "[" | "\\" | "]"
					| "^" | "`" | "{" | "|" | "}" | "~"> }
					
TOKEN : { <letter : ["A"-"Z"] | ["a"-"z"]> }
TOKEN : { <digit : ["0"-"9"]> }
TOKEN : { <op_asgn : "+=" |"-=" |"*=" |"/=" |"%=" |"**=" |"&=" |"|=" |"^=" |"<<=" |">>=" |"&&=" |"||="> }
 
void program() :
{
	System.out.println("program()");
}
{
	identifier() expr() ((<T>)+ (program() | <EOF>))* <EOF>
}

void string() :
{
	System.out.println("string()");
}
{
	<quote> (letter() | digit() | symbol())* <quote>
}

void num() :
{
	System.out.println("num()");
}
{
	(<digit>)+ [<dot> (<digit>)*]
}

void letter() :
{
	System.out.println("letter()");
}
{
	<letter>
}

void op() :
{
	System.out.println("op()");
}
{
	(<op_asgn> | <plus> | <minus> | <equal>) 
}

void digit() :
{
	System.out.println("digit()");
}
{
	<digit>
}

void symbol() :
{
	System.out.println("symbol()");
}
{
	(<symbol> | <lparen> | <rparen> | <underscore> | <dot> | <plus> | <minus> | <equal>)
}

void identifier() :
{
	System.out.println("identifier()");
}
{
	(letter() | <underscore>) (letter() | <underscore> | digit())* }

void expr() :
{
	System.out.println("expr()");
}
{
	identifier() [expr2()]
	| string() [expr2()]
	| num() [expr2()]
	| <lparen> expr() <rparen> [expr2()]
}

void expr2() :
{
	System.out.println("");
}
{
	op() expr() [expr2()]
}

void class() :
{
	classCounter++;
}
{
	<class>
}



