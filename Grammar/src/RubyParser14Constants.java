/* Generated By:JavaCC: Do not edit this line. RubyParser14Constants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface RubyParser14Constants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int T = 4;
  /** RegularExpression Id. */
  int pipe = 5;
  /** RegularExpression Id. */
  int quote = 6;
  /** RegularExpression Id. */
  int apostr = 7;
  /** RegularExpression Id. */
  int backapostr = 8;
  /** RegularExpression Id. */
  int colon = 9;
  /** RegularExpression Id. */
  int equal = 10;
  /** RegularExpression Id. */
  int underline = 11;
  /** RegularExpression Id. */
  int plusequal = 12;
  /** RegularExpression Id. */
  int starequal = 13;
  /** RegularExpression Id. */
  int slashequal = 14;
  /** RegularExpression Id. */
  int percentequal = 15;
  /** RegularExpression Id. */
  int powerequal = 16;
  /** RegularExpression Id. */
  int minusequal = 17;
  /** RegularExpression Id. */
  int amperequal = 18;
  /** RegularExpression Id. */
  int andequal = 19;
  /** RegularExpression Id. */
  int pipeequal = 20;
  /** RegularExpression Id. */
  int orequal = 21;
  /** RegularExpression Id. */
  int lshiftequal = 22;
  /** RegularExpression Id. */
  int caretequal = 23;
  /** RegularExpression Id. */
  int equal2 = 24;
  /** RegularExpression Id. */
  int equal3 = 25;
  /** RegularExpression Id. */
  int lbrace = 26;
  /** RegularExpression Id. */
  int rbrace = 27;
  /** RegularExpression Id. */
  int at = 28;
  /** RegularExpression Id. */
  int dollar = 29;
  /** RegularExpression Id. */
  int plusat = 30;
  /** RegularExpression Id. */
  int minusat = 31;
  /** RegularExpression Id. */
  int lsqbracket = 32;
  /** RegularExpression Id. */
  int sqbrackets = 33;
  /** RegularExpression Id. */
  int sqbracketsequal = 34;
  /** RegularExpression Id. */
  int rsqbracket = 35;
  /** RegularExpression Id. */
  int lparen = 36;
  /** RegularExpression Id. */
  int rparen = 37;
  /** RegularExpression Id. */
  int comma = 38;
  /** RegularExpression Id. */
  int exclamation = 39;
  /** RegularExpression Id. */
  int question = 40;
  /** RegularExpression Id. */
  int exclamationequal = 41;
  /** RegularExpression Id. */
  int exclamationtilde = 42;
  /** RegularExpression Id. */
  int equaltilde = 43;
  /** RegularExpression Id. */
  int tilde = 44;
  /** RegularExpression Id. */
  int less = 45;
  /** RegularExpression Id. */
  int lshift = 46;
  /** RegularExpression Id. */
  int more = 47;
  /** RegularExpression Id. */
  int rshift = 48;
  /** RegularExpression Id. */
  int lessorequal = 49;
  /** RegularExpression Id. */
  int moreorequal = 50;
  /** RegularExpression Id. */
  int rshiftequal = 51;
  /** RegularExpression Id. */
  int lessequalmore = 52;
  /** RegularExpression Id. */
  int equalmore = 53;
  /** RegularExpression Id. */
  int caret = 54;
  /** RegularExpression Id. */
  int dot = 55;
  /** RegularExpression Id. */
  int dot2 = 56;
  /** RegularExpression Id. */
  int dot3 = 57;
  /** RegularExpression Id. */
  int plus = 58;
  /** RegularExpression Id. */
  int minus = 59;
  /** RegularExpression Id. */
  int star = 60;
  /** RegularExpression Id. */
  int power = 61;
  /** RegularExpression Id. */
  int slash = 62;
  /** RegularExpression Id. */
  int percent = 63;
  /** RegularExpression Id. */
  int amper = 64;
  /** RegularExpression Id. */
  int and = 65;
  /** RegularExpression Id. */
  int or = 66;
  /** RegularExpression Id. */
  int colon2 = 67;
  /** RegularExpression Id. */
  int keyword_do = 68;
  /** RegularExpression Id. */
  int keyword_self = 69;
  /** RegularExpression Id. */
  int keyword_then = 70;
  /** RegularExpression Id. */
  int keyword_ensure = 71;
  /** RegularExpression Id. */
  int keyword_defined = 72;
  /** RegularExpression Id. */
  int keyword_begin = 73;
  /** RegularExpression Id. */
  int keyword_case = 74;
  /** RegularExpression Id. */
  int keyword_for = 75;
  /** RegularExpression Id. */
  int keyword_class = 76;
  /** RegularExpression Id. */
  int keyword_end = 77;
  /** RegularExpression Id. */
  int keyword_numeric = 78;
  /** RegularExpression Id. */
  int keyword_BEGIN = 79;
  /** RegularExpression Id. */
  int keyword_END = 80;
  /** RegularExpression Id. */
  int keyword_undef = 81;
  /** RegularExpression Id. */
  int keyword_rescue = 82;
  /** RegularExpression Id. */
  int keyword_alias = 83;
  /** RegularExpression Id. */
  int keyword_else = 84;
  /** RegularExpression Id. */
  int keyword_if = 85;
  /** RegularExpression Id. */
  int keyword_in = 86;
  /** RegularExpression Id. */
  int keyword_elsif = 87;
  /** RegularExpression Id. */
  int keyword_while = 88;
  /** RegularExpression Id. */
  int keyword_module = 89;
  /** RegularExpression Id. */
  int keyword_def = 90;
  /** RegularExpression Id. */
  int keyword_when = 91;
  /** RegularExpression Id. */
  int keyword_unless = 92;
  /** RegularExpression Id. */
  int keyword_until = 93;
  /** RegularExpression Id. */
  int keyword_yield = 94;
  /** RegularExpression Id. */
  int keyword_nil = 95;
  /** RegularExpression Id. */
  int keyword_and = 96;
  /** RegularExpression Id. */
  int keyword_or = 97;
  /** RegularExpression Id. */
  int keyword_return = 98;
  /** RegularExpression Id. */
  int keyword_not = 99;
  /** RegularExpression Id. */
  int eps = 100;
  /** RegularExpression Id. */
  int letter = 101;
  /** RegularExpression Id. */
  int digit = 102;
  /** RegularExpression Id. */
  int symbol = 103;
  /** RegularExpression Id. */
  int Q = 104;
  /** RegularExpression Id. */
  int q = 105;
  /** RegularExpression Id. */
  int x = 106;
  /** RegularExpression Id. */
  int r = 107;
  /** RegularExpression Id. */
  int i = 108;
  /** RegularExpression Id. */
  int o = 109;
  /** RegularExpression Id. */
  int p = 110;
  /** RegularExpression Id. */
  int keyword_super = 111;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "<T>",
    "\"|\"",
    "\"\\\"\"",
    "\"\\\'\"",
    "\"`\"",
    "\":\"",
    "\"=\"",
    "\"_\"",
    "\"+=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"**=\"",
    "\"-=\"",
    "\"&=\"",
    "\"&&=\"",
    "\"|=\"",
    "\"||=\"",
    "\"<<=\"",
    "\"^=\"",
    "\"==\"",
    "\"===\"",
    "\"{\"",
    "\"}\"",
    "\"@\"",
    "\"$\"",
    "\"+@\"",
    "\"-@\"",
    "\"[\"",
    "\"[]\"",
    "\"[]=\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\"!\"",
    "\"?\"",
    "\"!=\"",
    "\"!~\"",
    "\"=~\"",
    "\"~\"",
    "\"<\"",
    "\"<<\"",
    "\">\"",
    "\">>\"",
    "\"<=\"",
    "\">=\"",
    "\" >>=\"",
    "\"<=>\"",
    "\"=>\"",
    "\"^\"",
    "\".\"",
    "\"..\"",
    "\"...\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"**\"",
    "\"/\"",
    "\"%\"",
    "\"&\"",
    "\"&&\"",
    "\"||\"",
    "\"::\"",
    "\"do\"",
    "\"self\"",
    "\"then\"",
    "\"ensure\"",
    "\"defined?\"",
    "\"begin\"",
    "\"case\"",
    "\"for\"",
    "\"class\"",
    "\"end\"",
    "\"numeric\"",
    "\"BEGIN\"",
    "\"END\"",
    "\"undef\"",
    "\"rescue\"",
    "\"alias\"",
    "\"else\"",
    "\"if\"",
    "\"in\"",
    "\"elsif\"",
    "\"while\"",
    "\"module\"",
    "\"def\"",
    "\"when\"",
    "\"unless\"",
    "\"until\"",
    "\"yield\"",
    "\"nil\"",
    "\"and\"",
    "\"or\"",
    "\"return\"",
    "\"not\"",
    "\"\"",
    "<letter>",
    "<digit>",
    "<symbol>",
    "\"Q\"",
    "\"q\"",
    "\"x\"",
    "\"r\"",
    "\"i\"",
    "\"o\"",
    "\"p\"",
    "\"super\"",
  };

}
