/* Generated By:JavaCC: Do not edit this line. RubyParser14Constants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface RubyParser14Constants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int any_char = 3;
  /** RegularExpression Id. */
  int ch = 4;
  /** RegularExpression Id. */
  int num = 5;
  /** RegularExpression Id. */
  int Q = 6;
  /** RegularExpression Id. */
  int q = 7;
  /** RegularExpression Id. */
  int x = 8;
  /** RegularExpression Id. */
  int r = 9;
  /** RegularExpression Id. */
  int i = 10;
  /** RegularExpression Id. */
  int o = 11;
  /** RegularExpression Id. */
  int p = 12;
  /** RegularExpression Id. */
  int T = 13;
  /** RegularExpression Id. */
  int pipe = 14;
  /** RegularExpression Id. */
  int quote = 15;
  /** RegularExpression Id. */
  int apostr = 16;
  /** RegularExpression Id. */
  int backapostr = 17;
  /** RegularExpression Id. */
  int colon = 18;
  /** RegularExpression Id. */
  int equal = 19;
  /** RegularExpression Id. */
  int plusequal = 20;
  /** RegularExpression Id. */
  int starequal = 21;
  /** RegularExpression Id. */
  int slashequal = 22;
  /** RegularExpression Id. */
  int percentequal = 23;
  /** RegularExpression Id. */
  int powerequal = 24;
  /** RegularExpression Id. */
  int minusequal = 25;
  /** RegularExpression Id. */
  int amperequal = 26;
  /** RegularExpression Id. */
  int andequal = 27;
  /** RegularExpression Id. */
  int pipeequal = 28;
  /** RegularExpression Id. */
  int orequal = 29;
  /** RegularExpression Id. */
  int lshiftequal = 30;
  /** RegularExpression Id. */
  int caretequal = 31;
  /** RegularExpression Id. */
  int equal2 = 32;
  /** RegularExpression Id. */
  int equal3 = 33;
  /** RegularExpression Id. */
  int lbrace = 34;
  /** RegularExpression Id. */
  int rbrace = 35;
  /** RegularExpression Id. */
  int at = 36;
  /** RegularExpression Id. */
  int dollar = 37;
  /** RegularExpression Id. */
  int plusat = 38;
  /** RegularExpression Id. */
  int minusat = 39;
  /** RegularExpression Id. */
  int lsqbracket = 40;
  /** RegularExpression Id. */
  int sqbrackets = 41;
  /** RegularExpression Id. */
  int sqbracketsequal = 42;
  /** RegularExpression Id. */
  int rsqbracket = 43;
  /** RegularExpression Id. */
  int lparen = 44;
  /** RegularExpression Id. */
  int rparen = 45;
  /** RegularExpression Id. */
  int comma = 46;
  /** RegularExpression Id. */
  int exclamation = 47;
  /** RegularExpression Id. */
  int question = 48;
  /** RegularExpression Id. */
  int exclamationequal = 49;
  /** RegularExpression Id. */
  int exclamationtilde = 50;
  /** RegularExpression Id. */
  int equaltilde = 51;
  /** RegularExpression Id. */
  int tilde = 52;
  /** RegularExpression Id. */
  int less = 53;
  /** RegularExpression Id. */
  int lshift = 54;
  /** RegularExpression Id. */
  int more = 55;
  /** RegularExpression Id. */
  int rshift = 56;
  /** RegularExpression Id. */
  int lessorequal = 57;
  /** RegularExpression Id. */
  int moreorequal = 58;
  /** RegularExpression Id. */
  int rshiftequal = 59;
  /** RegularExpression Id. */
  int lessequalmore = 60;
  /** RegularExpression Id. */
  int equalmore = 61;
  /** RegularExpression Id. */
  int caret = 62;
  /** RegularExpression Id. */
  int dot = 63;
  /** RegularExpression Id. */
  int dot2 = 64;
  /** RegularExpression Id. */
  int dot3 = 65;
  /** RegularExpression Id. */
  int plus = 66;
  /** RegularExpression Id. */
  int minus = 67;
  /** RegularExpression Id. */
  int star = 68;
  /** RegularExpression Id. */
  int power = 69;
  /** RegularExpression Id. */
  int slash = 70;
  /** RegularExpression Id. */
  int percent = 71;
  /** RegularExpression Id. */
  int amper = 72;
  /** RegularExpression Id. */
  int and = 73;
  /** RegularExpression Id. */
  int or = 74;
  /** RegularExpression Id. */
  int colon2 = 75;
  /** RegularExpression Id. */
  int keyword_do = 76;
  /** RegularExpression Id. */
  int keyword_self = 77;
  /** RegularExpression Id. */
  int keyword_then = 78;
  /** RegularExpression Id. */
  int keyword_ensure = 79;
  /** RegularExpression Id. */
  int keyword_defined = 80;
  /** RegularExpression Id. */
  int keyword_begin = 81;
  /** RegularExpression Id. */
  int keyword_case = 82;
  /** RegularExpression Id. */
  int keyword_for = 83;
  /** RegularExpression Id. */
  int keyword_class = 84;
  /** RegularExpression Id. */
  int keyword_end = 85;
  /** RegularExpression Id. */
  int keyword_numeric = 86;
  /** RegularExpression Id. */
  int keyword_BEGIN = 87;
  /** RegularExpression Id. */
  int keyword_END = 88;
  /** RegularExpression Id. */
  int keyword_undef = 89;
  /** RegularExpression Id. */
  int keyword_rescue = 90;
  /** RegularExpression Id. */
  int keyword_alias = 91;
  /** RegularExpression Id. */
  int keyword_else = 92;
  /** RegularExpression Id. */
  int keyword_if = 93;
  /** RegularExpression Id. */
  int keyword_in = 94;
  /** RegularExpression Id. */
  int keyword_elsif = 95;
  /** RegularExpression Id. */
  int keyword_while = 96;
  /** RegularExpression Id. */
  int keyword_module = 97;
  /** RegularExpression Id. */
  int keyword_def = 98;
  /** RegularExpression Id. */
  int keyword_when = 99;
  /** RegularExpression Id. */
  int keyword_unless = 100;
  /** RegularExpression Id. */
  int keyword_until = 101;
  /** RegularExpression Id. */
  int keyword_yield = 102;
  /** RegularExpression Id. */
  int keyword_nil = 103;
  /** RegularExpression Id. */
  int keyword_and = 104;
  /** RegularExpression Id. */
  int keyword_or = 105;
  /** RegularExpression Id. */
  int keyword_return = 106;
  /** RegularExpression Id. */
  int keyword_not = 107;
  /** RegularExpression Id. */
  int eps = 108;
  /** RegularExpression Id. */
  int eps1 = 109;
  /** RegularExpression Id. */
  int eps2 = 110;
  /** RegularExpression Id. */
  int eps3 = 111;
  /** RegularExpression Id. */
  int eps4 = 112;
  /** RegularExpression Id. */
  int eps5 = 113;
  /** RegularExpression Id. */
  int eps6 = 114;
  /** RegularExpression Id. */
  int eps7 = 115;
  /** RegularExpression Id. */
  int eps8 = 116;
  /** RegularExpression Id. */
  int eps9 = 117;
  /** RegularExpression Id. */
  int eps10 = 118;
  /** RegularExpression Id. */
  int eps11 = 119;
  /** RegularExpression Id. */
  int eps12 = 120;
  /** RegularExpression Id. */
  int eps13 = 121;
  /** RegularExpression Id. */
  int eps14 = 122;
  /** RegularExpression Id. */
  int eps15 = 123;
  /** RegularExpression Id. */
  int eps16 = 124;
  /** RegularExpression Id. */
  int eps17 = 125;
  /** RegularExpression Id. */
  int eps18 = 126;
  /** RegularExpression Id. */
  int eps19 = 127;
  /** RegularExpression Id. */
  int eps20 = 128;
  /** RegularExpression Id. */
  int eps21 = 129;
  /** RegularExpression Id. */
  int eps22 = 130;
  /** RegularExpression Id. */
  int eps23 = 131;
  /** RegularExpression Id. */
  int eps24 = 132;
  /** RegularExpression Id. */
  int eps25 = 133;
  /** RegularExpression Id. */
  int eps26 = 134;
  /** RegularExpression Id. */
  int eps27 = 135;
  /** RegularExpression Id. */
  int eps28 = 136;
  /** RegularExpression Id. */
  int eps29 = 137;
  /** RegularExpression Id. */
  int eps30 = 138;
  /** RegularExpression Id. */
  int eps31 = 139;
  /** RegularExpression Id. */
  int eps32 = 140;
  /** RegularExpression Id. */
  int eps33 = 141;
  /** RegularExpression Id. */
  int eps34 = 142;
  /** RegularExpression Id. */
  int eps35 = 143;
  /** RegularExpression Id. */
  int eps36 = 144;
  /** RegularExpression Id. */
  int eps37 = 145;
  /** RegularExpression Id. */
  int eps38 = 146;
  /** RegularExpression Id. */
  int eps39 = 147;
  /** RegularExpression Id. */
  int eps40 = 148;
  /** RegularExpression Id. */
  int eps41 = 149;
  /** RegularExpression Id. */
  int eps42 = 150;
  /** RegularExpression Id. */
  int eps43 = 151;
  /** RegularExpression Id. */
  int eps44 = 152;
  /** RegularExpression Id. */
  int keyword_super = 153;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"!!!!!!!!!!\"",
    "<ch>",
    "<num>",
    "\"Q\"",
    "\"q\"",
    "\"x\"",
    "\"r\"",
    "\"i\"",
    "\"o\"",
    "\"p\"",
    "<T>",
    "\"|\"",
    "\"\\\"\"",
    "\"\\\'\"",
    "\"`\"",
    "\":\"",
    "\"=\"",
    "\"+=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"**=\"",
    "\"-=\"",
    "\"&=\"",
    "\"&&=\"",
    "\"|=\"",
    "\"||=\"",
    "\"<<=\"",
    "\"^=\"",
    "\"==\"",
    "\"===\"",
    "\"{\"",
    "\"}\"",
    "\"@\"",
    "\"$\"",
    "\"+@\"",
    "\"-@\"",
    "\"[\"",
    "\"[]\"",
    "\"[]=\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\"!\"",
    "\"?\"",
    "\"!=\"",
    "\"!~\"",
    "\"=~\"",
    "\"~\"",
    "\"<\"",
    "\"<<\"",
    "\">\"",
    "\">>\"",
    "\"<=\"",
    "\">=\"",
    "\" >>=\"",
    "\"<=>\"",
    "\"=>\"",
    "\"^\"",
    "\".\"",
    "\"..\"",
    "\"...\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"**\"",
    "\"/\"",
    "\"%\"",
    "\"&\"",
    "\"&&\"",
    "\"||\"",
    "\"::\"",
    "\"do\"",
    "\"self\"",
    "\"then\"",
    "\"ensure\"",
    "\"defined?\"",
    "\"begin\"",
    "\"case\"",
    "\"for\"",
    "\"class\"",
    "\"end\"",
    "\"numeric\"",
    "\"BEGIN\"",
    "\"END\"",
    "\"undef\"",
    "\"rescue\"",
    "\"alias\"",
    "\"else\"",
    "\"if\"",
    "\"in\"",
    "\"elsif\"",
    "\"while\"",
    "\"module\"",
    "\"def\"",
    "\"when\"",
    "\"unless\"",
    "\"until\"",
    "\"yield\"",
    "\"nil\"",
    "\"and\"",
    "\"or\"",
    "\"return\"",
    "\"not\"",
    "\"\"",
    "\"!@#e1\"",
    "\"!@#e2\"",
    "\"!@#e3\"",
    "\"!@#e4\"",
    "\"!@#e5\"",
    "\"!@#e6\"",
    "\"!@#e7\"",
    "\"!@#e8\"",
    "\"!@#e9\"",
    "\"!@#e10\"",
    "\"!@#e11\"",
    "\"!@#e12\"",
    "\"!@#e13\"",
    "\"!@#e14\"",
    "\"!@#e15\"",
    "\"!@#e16\"",
    "\"!@#e17\"",
    "\"!@#e18\"",
    "\"!@#e19\"",
    "\"!@#e20\"",
    "\"!@#e21\"",
    "\"!@#e22\"",
    "\"!@#e23\"",
    "\"!@#e24\"",
    "\"!@#e25\"",
    "\"!@#e26\"",
    "\"!@#e27\"",
    "\"!@#e28\"",
    "\"!@#e29\"",
    "\"!@#e30\"",
    "\"!@#e31\"",
    "\"!@#e32\"",
    "\"!@#e33\"",
    "\"!@#e34\"",
    "\"!@#e35\"",
    "\"!@#e36\"",
    "\"!@#e37\"",
    "\"!@#e38\"",
    "\"!@#e39\"",
    "\"!@#e40\"",
    "\"!@#e41\"",
    "\"!@#e42\"",
    "\"!@#e43\"",
    "\"!@#e44\"",
    "\"super\"",
  };

}
